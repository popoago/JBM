While I was going through the data, the first thing that I realized was that there weren't enough examples available to train a model from scratch and that data augmentation techniques had to be incorporated to prevent the model for overfitting. Also, a relatively smaller model should have been sufficient to get a good output. So, I chose a pretrained Resnet34 architecture for this assignment. Moreover, fastai was my choice of module because of its relative easiness and availability of the recent advancements in the deep learning research.

Using google colab to run the training, and applying standard data augmentation techniques(horizontal flip, vertical flip, zooming in/out and rotation), I was able to achieve a validation accuracy of 86% with only 4 epochs. After unfreezing the lower layers and training for another 6 epochs, I was able to obtain an accuracy of 90%. Because I didn't want to overfit the model, I stopped the training there and moved on to develop a production environment. 

It was fairly easy to create a web application using starlette and render[ available on https://defect-identifier.onrender.com]. It expects an image of the part to detect and upon clicking on analyze predicts if that part if healthy or defected. As a next step, I wanted to created a web interface which would connect this application to android. While I was researching online, I did come across an implementation which used expo to create an app but because of my limited knowledge of android and unavailabilty of enough material online for running fastai models on android, I wasn't able to do so. The next logical step was to convert the fastai trained model to tensorflow model which has an inbuilt support for creating android apps using onxx but during my research, I realised the portability is a little difficult so I decided to instead directly use tensorflow for this application.

Using tensorflow lite, I trained a mobilenet with similar data augmentation techniques as before, but because of the relative size of the architecture, I was only able to achieve an accuracy of 60% upon extensive training. After training and converting the model to tflite format, I used the example code available on tensorflow's github to create a custom android application using android studio, but it might be difficult to obtain an output from the app(it's a little inconsistent). If I had more time, I would have created a custom apk after going through relevant literature and yield a better output.

